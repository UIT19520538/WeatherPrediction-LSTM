# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PMbp32MbIDZppcJ4FL2tZnPtQ0JTdSPS
"""

from sklearn.preprocessing import MinMaxScaler
import pandas as pd
import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, LSTM
import time
import matplotlib.pyplot as plt

# Đọc Data
data = pd.read_csv('data.csv')

# Show Data
df = pd.DataFrame(data)
print(df)

datanew = []
# Lựa chọn các Data cần thiết cho Model
error = ['HUM', 'LUX', 'PRES','TC']
data = df[error]
# Lọc và loại bỏ các Data có giá trị None
for i in range(len(data)):
  if data['HUM'][i] == [0.] or data['LUX'][i] == [0.] or data['PRES'][i] == [0.] or data['TC'][i] == [0.]:
    pass
  else:
    # Thêm vào Datanew các giá trị khác rỗng
    datanew.append([data['HUM'][i],data['LUX'][i],data['PRES'][i],data['TC'][i]])
datanew
data_new = pd.DataFrame(datanew)
# Data sau khi xử lý 
data_new

# Khởi tạo bước nhảy
pre_day = 1
# Khởi tạo hàm MinMaxScaler từ 0,1 cho toàn bộ Data
scala_x = MinMaxScaler(feature_range=(0, 1))
scala_y = MinMaxScaler(feature_range=(0, 1))
# Khởi tạo input , output
cols_x = [0, 1, 2]
cols_y = [3]
# Scaler giá trị input , output
scaled_data_x = scala_x.fit_transform(data_new[cols_x].values.reshape(-1, len(cols_x)))
scaled_data_y = scala_y.fit_transform(data_new[cols_y].values.reshape(-1, len(cols_y)))

x_total = []
y_total = []

for i in range(pre_day, len(data_new)):
      x_total.append(scaled_data_x[i-pre_day:i])
      y_total.append(scaled_data_y[i])

# Chia dữ liệu thành 2 phần train và test
test_size = 50
x_train = np.array(x_total[:len(x_total)-test_size])
x_test = np.array(x_total[len(x_total)-test_size:])
y_train = np.array(y_total[:len(y_total)-test_size])
y_test = np.array(y_total[len(y_total)-test_size:])

print(x_train.shape, y_train.shape, x_test.shape, y_test.shape)

# Xây dựng Model bư
model = Sequential()
model.add(LSTM(units=60, return_sequences=True, input_shape=(x_train.shape[1], x_train.shape[2])))
model.add(Dropout(0.2))
model.add(LSTM(units=60, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=60, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=60, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=60))
model.add(Dropout(0.2))
model.add(Dense(units=len(cols_y)))

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(x_train, y_train, epochs=120, steps_per_epoch=40, use_multiprocessing=True)
# Lưu Model lại sau khi training
model.save("model.h5")
print("Hoàn Thành Training")

# Kiểm tra model với x_test
predict_prices = model.predict(x_test)
predict_prices = scala_y.inverse_transform(predict_prices)

predict_prices = model.predict(x_test)
predict_prices = scala_y.inverse_transform(predict_prices)

real_price = data_new[len(data_new)-test_size:][3].values.reshape(-1, 1)
real_price = np.array(real_price)
real_price = real_price.reshape(real_price.shape[0], 1)


plt.plot(real_price, color="red", label=f"Nhiệt Độ Thiệt")
plt.plot(predict_prices, color="blue", label=f"Nhiệt Độ Dự Đoán")
plt.title(f"Dự Đoán Nhiệt Độ")
plt.xlabel("Step")
plt.ylabel("Nhiệt Độ")
plt.ylim(bottom=0)
plt.legend()
plt.show()

